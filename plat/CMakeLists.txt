
if(WIN32)
    add_subdirectory(windows)
    # set(GRAPHICS_LIB_BASE Base)
    set(GRAPHICS_LIB_D2D D2d)
    # set(GRAPHICS_LIB_OPENGL Gl)
    set (PLAT_DIR_NAME windows/)
    # set (PLAT_DIR_NAME linux/)

    if(GRAPHICS_LIB_BASE)
        set(PLAT_INCLUDE_NAME ${PLAT_DIR_NAME}win_base.hpp)
        set(PLAT_APP_CLASS ${WIN_GRAPHICS_LIB_BASE}App)
    elseif(GRAPHICS_LIB_D2D)
        set(PLAT_INCLUDE_NAME ${PLAT_DIR_NAME}d2d_app.hpp)
        set(PLAT_APP_CLASS ${GRAPHICS_LIB_D2D}App)
        set(RENDERER_CLASS ${GRAPHICS_LIB_D2D}Mgr)
        
        set (RENDER_API_SOURCE 
            ${PLAT_DIR_NAME}d2d_mgr.cpp
            ${PLAT_DIR_NAME}d2d_mgr.hpp)
        find_library(D2D1_LIBRARY d2d1)
        add_library(RENDER_API_LIB ${RENDER_API_SOURCE})
        target_link_libraries(RENDER_API_LIB ${D2D1_LIBRARY})
    elseif(GRAPHICS_LIB_OPENGL)
        set(PLAT_INCLUDE_NAME ${PLAT_DIR_NAME}gl_app.hpp)
        set(PLAT_APP_CLASS ${GRAPHICS_LIB_OPENGL}App)
    endif()
elseif(UNIX)
    if(APPLE)
        add_subdirectory(apple)
    elseif(BSD)
        add_subdirectory(linux)
    else()
        add_subdirectory(linux)
        # set(GRAPHICS_LIB_BASE Base)
        set(GRAPHICS_LIB_OPENGL Gl)
        set (PLAT_DIR_NAME linux/)

        if(GRAPHICS_LIB_BASE)
            set(PLAT_INCLUDE_NAME ${PLAT_DIR_NAME}linux_base.hpp)
            set(PLAT_APP_CLASS ${GRAPHICS_LIB_BASE}App)
        elseif(GRAPHICS_LIB_OPENGL)
            set(PLAT_INCLUDE_NAME ${PLAT_DIR_NAME}gl_app.hpp)
            set(PLAT_APP_CLASS ${GRAPHICS_LIB_OPENGL}App)
        endif()
    endif(APPLE)
else()
    add_subdirectory(empty)
endif(WIN32)

configure_file(
    "${PROJECT_SOURCE_DIR}/plat/plat_app.h.in"
    "${PROJECT_SOURCE_DIR}/plat/plat_app.hpp")